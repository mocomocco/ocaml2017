#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <errno.h>

/*#include <sys/types.h>
  #include <sys/wait.h>*/
#include <string.h>

int main(){
  pid_t cid0=0,cid1=0,check;
  char tmp[260],buf[3];
   fcntl(STDIN_FILENO,F_SETFL,O_NONBLOCK);
  /*  const int num = 100;
      int status;
      int fd[2],fd2[2];
  
      pipe(fd);//pipe
      pipe(fd2);
      printf("pipe1:%d %d\n",fd[0],fd[1]);
      printf("pipe2:%d %d\n",fd2[0],fd2[1]);
  
  */
   int fdpa[2],fdb[2];
  int status;


  pipe(fdpa);//パイプ開通
  pipe(fdb);


  fcntl(fdb[0],F_SETFL,O_NONBLOCK);
  fcntl(fdb[1],F_SETFL,O_NONBLOCK);
   
  cid0 = fork();
  //printf("id: %d\n",cid[i]);
  if (cid0 != 0){cid1=fork();}

  if(cid0 != 0 && cid1 != 0){//親だったら
    FILE *fp;
    fp=fopen("readme.txt","r");
    /* do{
      if((check=waitpid(cid1,&status,WHOHANG))>0)perror(wait() error);
      else{
      if(WIFEXITED(status)){*/
	  while(fgets(tmp,sizeof(tmp),fp)!=NULL){
	    if(read(fdb[0],buf,sizeof(char)*3)>0){      
	      printf("A:%s",buf);
	      printf("\n");
	      if(strcmp(buf,"b\n")==0)printf("a!!");
 
	    }

	    printf("%s",tmp);
	    write(fdpa[1], tmp,260);
	    /*	  }//読み込む文字列があれば
		  }//子プロセスが終了したら*/
	    // }
	  }
	fclose(fp);
  }
  if(cid0 != 0 && cid1 ==0){//Aだったら
    while(read(fdpa[0],tmp,260)>0){
         if(read(fdb[0],buf,sizeof(char)*3)>0){      
		printf("B:%s",buf);
		printf("\n");
     if(strcmp(buf,"b\n")==0)printf("b!!");
 
	 }
      printf("%s",tmp);
      sleep(1);
  
    }
  }
  if(cid0 != 0 && cid1 !=0){//Bだったら
  
 while(strcmp(buf,"c\n")!=0){
      buf[0]='\0';
      buf[1]='\0';
      buf[2]='\0';
      if(read(STDIN_FILENO,buf,sizeof(char)*3)!=-1){
      printf("C:%s",buf);
      write(fdb[1], buf,3);
      }
 }
 printf("/////////");


    return 0;}
  
    
	  /* if (cid0 == 0) {//if this process childs
	    for(int i=0;i<num;i++){
	      char strS[300],strR[300];
		  sprintf(strS, "%d\n", i);
		  printf("sen: %s", strS);
		  write(fd[1], strS, strlen(strS) + 1);
		  read(fd2[0],strR,sizeof(strR));
		  printf("rec:%s",strR);}
		  return 0;
		  }*/
	  //if (cid1 == 0) {//if this process childs
		 // char string[300];
		 // sprintf(string, "%d\n", i);
		 // //printf("sen: %s", string);
		 // write(fd[1], string, strlen(string) + 1);
		 // return 0;
	  //}
  
	  /*
  
    char buf[300];
    for(int i=0;i<num;i++){
    read(fd[0],buf,sizeof(buf));
    printf("buR:%s",buf);
    write(fd2[1],buf,sizeof(buf));
    printf("buS:%s",buf);    
  }

  //wait all id
    wait(&status);

    return 0;*/
  }
